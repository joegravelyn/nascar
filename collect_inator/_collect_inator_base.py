#######################################################################
## THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MAKE CHANGES HERE.
#######################################################################

from toolbox.nascar_api import Feeds, get_api_data
from sqlalchemy import Engine 
import pandas as pd
from collect_inator import tracks_logic
from collect_inator import live_ops_logic
from collect_inator import races_logic
from collect_inator import schedule_logic
from collect_inator import current_points_logic
from collect_inator import owner_points_logic
from collect_inator import drivers_feed_logic
from collect_inator import playoffs_round_0_logic
from collect_inator import playoffs_round_1_logic
from collect_inator import playoffs_round_2_logic
from collect_inator import playoffs_round_3_logic
from collect_inator import playoffs_round_4_logic
from collect_inator import flags_logic
from collect_inator import live_feed_logic
from collect_inator import live_points_logic
from collect_inator import pit_stops_logic
from collect_inator import lap_times_logic
from collect_inator import race_results_logic
from collect_inator import lap_notes_logic
from collect_inator import snaps_logic
from collect_inator import weekend_feed_logic
from collect_inator import lap_averages_logic
from collect_inator import box_score_logic


def get_tracks(url_header: str, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Tracks, {}, url_header=url_header)

   if api_result["result"]:
      df_dict = tracks_logic.json_to_df(api_result["json"])

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Tracks. URL response code = {api_result["result_code"]}")
      return (False, None)

def get_live_ops(url_header: str, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Live_Ops, {}, url_header=url_header)

   if api_result["result"]:
      df_dict = live_ops_logic.json_to_df(api_result["json"])

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Live_Ops. URL response code = {api_result["result_code"]}")
      return (False, None)

def get_races(url_header: str, year: int, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Races, {"year": year}, url_header=url_header)

   if api_result["result"]:
      df_dict = races_logic.json_to_df(api_result["json"], year=year)

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Races. URL response code = {api_result["result_code"]}")
      return (False, None)

def get_schedule(url_header: str, year: int, series_id: int, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Schedule, {"year": year, "series_id": series_id}, url_header=url_header)

   if api_result["result"]:
      df_dict = schedule_logic.json_to_df(api_result["json"], year=year, series_id=series_id)

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Schedule. URL response code = {api_result["result_code"]}")
      return (False, None)

def get_current_points(url_header: str, year: int, series_id: int, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Current_Points, {"year": year, "series_id": series_id}, url_header=url_header)

   if api_result["result"]:
      df_dict = current_points_logic.json_to_df(api_result["json"], year=year, series_id=series_id)

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Current_Points. URL response code = {api_result["result_code"]}")
      return (False, None)

def get_owner_points(url_header: str, year: int, series_id: int, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Owner_Points, {"year": year, "series_id": series_id}, url_header=url_header)

   if api_result["result"]:
      df_dict = owner_points_logic.json_to_df(api_result["json"], year=year, series_id=series_id)

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Owner_Points. URL response code = {api_result["result_code"]}")
      return (False, None)

def get_drivers_feed(url_header: str, year: int, series_id: int, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Drivers_Feed, {"year": year, "series_id": series_id}, url_header=url_header)

   if api_result["result"]:
      df_dict = drivers_feed_logic.json_to_df(api_result["json"], year=year, series_id=series_id)

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Drivers_Feed. URL response code = {api_result["result_code"]}")
      return (False, None)

def get_playoffs_round_0(url_header: str, year: int, series_id: int, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Playoffs_Round_0, {"year": year, "series_id": series_id}, url_header=url_header)

   if api_result["result"]:
      df_dict = playoffs_round_0_logic.json_to_df(api_result["json"], year=year, series_id=series_id)

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Playoffs_Round_0. URL response code = {api_result["result_code"]}")
      return (False, None)

def get_playoffs_round_1(url_header: str, year: int, series_id: int, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Playoffs_Round_1, {"year": year, "series_id": series_id}, url_header=url_header)

   if api_result["result"]:
      df_dict = playoffs_round_1_logic.json_to_df(api_result["json"], year=year, series_id=series_id)

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Playoffs_Round_1. URL response code = {api_result["result_code"]}")
      return (False, None)

def get_playoffs_round_2(url_header: str, year: int, series_id: int, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Playoffs_Round_2, {"year": year, "series_id": series_id}, url_header=url_header)

   if api_result["result"]:
      df_dict = playoffs_round_2_logic.json_to_df(api_result["json"], year=year, series_id=series_id)

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Playoffs_Round_2. URL response code = {api_result["result_code"]}")
      return (False, None)

def get_playoffs_round_3(url_header: str, year: int, series_id: int, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Playoffs_Round_3, {"year": year, "series_id": series_id}, url_header=url_header)

   if api_result["result"]:
      df_dict = playoffs_round_3_logic.json_to_df(api_result["json"], year=year, series_id=series_id)

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Playoffs_Round_3. URL response code = {api_result["result_code"]}")
      return (False, None)

def get_playoffs_round_4(url_header: str, year: int, series_id: int, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Playoffs_Round_4, {"year": year, "series_id": series_id}, url_header=url_header)

   if api_result["result"]:
      df_dict = playoffs_round_4_logic.json_to_df(api_result["json"], year=year, series_id=series_id)

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Playoffs_Round_4. URL response code = {api_result["result_code"]}")
      return (False, None)

def get_flags(url_header: str, series_id: int, race_id: int, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Flags, {"series_id": series_id, "race_id": race_id}, url_header=url_header)

   if api_result["result"]:
      df_dict = flags_logic.json_to_df(api_result["json"], series_id=series_id, race_id=race_id)

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Flags. URL response code = {api_result["result_code"]}")
      return (False, None)

def get_live_feed(url_header: str, series_id: int, race_id: int, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Live_Feed, {"series_id": series_id, "race_id": race_id}, url_header=url_header)

   if api_result["result"]:
      df_dict = live_feed_logic.json_to_df(api_result["json"], series_id=series_id, race_id=race_id)

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Live_Feed. URL response code = {api_result["result_code"]}")
      return (False, None)

def get_live_points(url_header: str, series_id: int, race_id: int, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Live_Points, {"series_id": series_id, "race_id": race_id}, url_header=url_header)

   if api_result["result"]:
      df_dict = live_points_logic.json_to_df(api_result["json"], series_id=series_id, race_id=race_id)

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Live_Points. URL response code = {api_result["result_code"]}")
      return (False, None)

def get_pit_stops(url_header: str, year: int, series_id: int, race_id: int, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Pit_Stops, {"year": year, "series_id": series_id, "race_id": race_id}, url_header=url_header)

   if api_result["result"]:
      df_dict = pit_stops_logic.json_to_df(api_result["json"], year=year, series_id=series_id, race_id=race_id)

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Pit_Stops. URL response code = {api_result["result_code"]}")
      return (False, None)

def get_lap_times(url_header: str, year: int, series_id: int, race_id: int, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Lap_Times, {"year": year, "series_id": series_id, "race_id": race_id}, url_header=url_header)

   if api_result["result"]:
      df_dict = lap_times_logic.json_to_df(api_result["json"], year=year, series_id=series_id, race_id=race_id)

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Lap_Times. URL response code = {api_result["result_code"]}")
      return (False, None)

def get_race_results(url_header: str, year: int, series_id: int, race_id: int, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Race_Results, {"year": year, "series_id": series_id, "race_id": race_id}, url_header=url_header)

   if api_result["result"]:
      df_dict = race_results_logic.json_to_df(api_result["json"], year=year, series_id=series_id, race_id=race_id)

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Race_Results. URL response code = {api_result["result_code"]}")
      return (False, None)

def get_lap_notes(url_header: str, year: int, series_id: int, race_id: int, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Lap_Notes, {"year": year, "series_id": series_id, "race_id": race_id}, url_header=url_header)

   if api_result["result"]:
      df_dict = lap_notes_logic.json_to_df(api_result["json"], year=year, series_id=series_id, race_id=race_id)

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Lap_Notes. URL response code = {api_result["result_code"]}")
      return (False, None)

def get_snaps(url_header: str, year: int, series_id: int, race_id: int, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Snaps, {"year": year, "series_id": series_id, "race_id": race_id}, url_header=url_header)

   if api_result["result"]:
      df_dict = snaps_logic.json_to_df(api_result["json"], year=year, series_id=series_id, race_id=race_id)

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Snaps. URL response code = {api_result["result_code"]}")
      return (False, None)

def get_weekend_feed(url_header: str, year: int, series_id: int, race_id: int, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Weekend_Feed, {"year": year, "series_id": series_id, "race_id": race_id}, url_header=url_header)

   if api_result["result"]:
      df_dict = weekend_feed_logic.json_to_df(api_result["json"], year=year, series_id=series_id, race_id=race_id)

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Weekend_Feed. URL response code = {api_result["result_code"]}")
      return (False, None)

def get_lap_averages(url_header: str, year: int, series_id: int, race_id: int, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Lap_Averages, {"year": year, "series_id": series_id, "race_id": race_id}, url_header=url_header)

   if api_result["result"]:
      df_dict = lap_averages_logic.json_to_df(api_result["json"], year=year, series_id=series_id, race_id=race_id)

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Lap_Averages. URL response code = {api_result["result_code"]}")
      return (False, None)

def get_box_score(url_header: str, year: int, series_id: int, race_id: int, sql_engine: Engine | None = None, load_to_sql: bool = True) -> tuple[bool, dict[str, pd.DataFrame] | None]:
   api_result = get_api_data(Feeds.Box_Score, {"year": year, "series_id": series_id, "race_id": race_id}, url_header=url_header)

   if api_result["result"]:
      df_dict = box_score_logic.json_to_df(api_result["json"], year=year, series_id=series_id, race_id=race_id)

      if load_to_sql:
         if sql_engine == None: return (False, None)
         for name in df_dict:
            existing_df = pd.read_sql_table(table_name=name, con=sql_engine, schema="nascar")
            df = pd.concat([df_dict[name], existing_df]).drop_duplicates(ignore_index=True)
            df.to_sql(name, con=sql_engine, if_exists="replace", index=False)

      return (True, df_dict)
   else:
      print(f"API call failed for Feeds.Box_Score. URL response code = {api_result["result_code"]}")
      return (False, None)

